package BinaryTree;

public class BinaryTree {
	private Node root;
	private Node currentNode;
	private Node previousNode;
	private Node anotherNode;
	private int value;
	int condition=-1;
	int currentValue = -1;
	public void addNode(int input){
		value = input;

		if (root == null){
			Node newNode = new Node(value,null);
			root = newNode;
		}else{
			currentNode = root;
			while(currentNode!=null){
				if(currentNode.value> value){
					previousNode = currentNode;
					currentNode = currentNode.leftNode;
				}else{
					previousNode = currentNode;
					currentNode = currentNode.rightNode;
				}
			}
			anotherNode = new Node(value,previousNode);
			if(previousNode.value>value) previousNode.leftNode = anotherNode;
			else previousNode.rightNode = anotherNode;
		}
	}
	
	public boolean remove(int data){
		currentNode = root;

		boolean IsitaLeftChild = false;
		while(currentNode!=null){
			if(currentNode.value == data) break;
			if(currentNode.value>data) {
				previousNode = currentNode;
				currentNode = currentNode.leftNode;
				IsitaLeftChild = true;
			}else{
				previousNode = currentNode;
				currentNode = currentNode.rightNode;
				IsitaLeftChild = false;
			}
			if(currentNode.value == data) break;
		}
		//case0: can't find the Node
		if (currentNode == null) {
			System.out.println("Sorry, there is no such value in the tree");
		}
		
		previousNode = currentNode;
		//case1: No Node in the tree
		if (root == null) return false;
		//case2: no child
		if (previousNode.rightNode == null && previousNode.leftNode == null){
			if (previousNode == root) root = null;
			else if (IsitaLeftChild){
				previousNode.parentNode.leftNode = null;
			}else{
				previousNode.parentNode.rightNode = null;
			}//case2: no left child
		}else if (previousNode.leftNode == null){
			if(previousNode == root) {
				root=previousNode.rightNode;
			}
			else if (IsitaLeftChild){
				previousNode.parentNode.leftNode = previousNode.rightNode;
			}else{
				previousNode.parentNode.rightNode = previousNode.rightNode;
			}//case3: no right child
		}else if(previousNode.rightNode == null){
			if(root==previousNode) root = previousNode.leftNode;
			else if(IsitaLeftChild){
				previousNode.parentNode.leftNode = previousNode.leftNode;
			}else{
				previousNode.parentNode.rightNode = previousNode.leftNode;
			}
		}else{
			if(previousNode == root) {
				root = getReplacement(previousNode);
			}
			else if(IsitaLeftChild){
				previousNode.parentNode.leftNode = getReplacement(previousNode);
			}else{
				previousNode.parentNode.rightNode = getReplacement(previousNode);
			}
		}
		
		return true;
		
	}
	
	public Node getReplacement(Node replacedNode){
		Node replacement = replacedNode;
		Node focusNode = replacedNode.rightNode;
		while(focusNode != null){
			replacement = focusNode;
			focusNode = replacement.leftNode;
		}
		if(replacement != replacedNode.rightNode){
			replacement.parentNode.leftNode = replacement.rightNode;
			replacement.rightNode = replacedNode.rightNode;
		}
		replacement.leftNode = replacedNode.leftNode;
		return replacement;
	}
	
	public void InorderDisplay(Node currentNode){
		if(currentNode != null){
			InorderDisplay(currentNode.leftNode);
			System.out.println(currentNode.value);
			InorderDisplay(currentNode.rightNode);
		}
	}

	
	public void PreorderDisplay(Node currentNode){
		if(currentNode != null){
			System.out.println(currentNode.value);
			PreorderDisplay(currentNode.leftNode);
			PreorderDisplay(currentNode.rightNode);
		}
	}
	
	public void PostOrderDisplay(Node currentNode){
		if(currentNode!=null){
			PostOrderDisplay(currentNode.leftNode);
			PostOrderDisplay(currentNode.rightNode);
			System.out.println(currentNode.value);
		}
	}
	
	public static void main(String[] args){
		BinaryTree newTree = new BinaryTree();
		newTree.addNode(10);
		newTree.addNode(13);
		newTree.addNode(7);
		newTree.addNode(20);
		newTree.addNode(5);
		newTree.addNode(8);
		newTree.addNode(30);
		newTree.addNode(100);
		newTree.addNode(70);
		newTree.addNode(110);
		newTree.remove(10);
		
		//newTree.InorderDisplay(newTree.root);
		newTree.PostOrderDisplay(newTree.root);
		
	}
}

class Node{
	Node leftNode;
	Node rightNode;
	Node parentNode;
	int value; 
	
	public Node(int input , Node parent){
		value = input;
		leftNode = null;
		rightNode = null;
		parentNode = parent;
	}
	
	
}
